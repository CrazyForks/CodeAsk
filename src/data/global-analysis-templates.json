{
  "zh": {
    "产品需求文档（PRD）": {
      "name": "产品需求文档（PRD）",
      "singlePageAnalysis": {
        "prompt": "请分析此代码文件，提供以下要点：\n1. 核心功能和目的（一句话描述）\n2. 主要功能模块\n3. 输入输出及交互方式（简述）\n4. 关键技术依赖\n请保持简洁，总字数不超过100字。"
      },
      "summaryAnalysis": {
        "prompt": "基于各文件的功能概要，撰写产品需求文档（PRD）：\n\n1. **产品概述**\n   - 背景与价值\n   描述产品诞生的业务背景及其市场价值，例如解决的问题、满足的市场需求或带来的商业机会。避免涉及技术背景。\n   - 目标用户\n   明确产品的目标用户群体，包括他们的特征、需求和行为。\n   - 核心价值\n   突出产品的核心竞争力以及对用户的价值主张，例如提升效率、改善体验等。\n   - 市场定位\n   说明产品在市场中的定位，确保与功能需求直接相关，避免过于技术化。\n\n2. **功能规格**\n   - 核心功能模块\n   列出产品的核心功能模块，清晰划分功能边界。\n   - 功能架构图（Mermaid）\n   使用Mermaid图表展示功能模块之间的关系，直观呈现产品功能结构。\n   - 详细功能描述\n   对每个功能模块进行详细描述，包括功能的目的、输入、输出及预期行为，确保内容具体且可理解。\n   - 功能优先级矩阵\n   定义各功能的优先级（如必须、重要、次要），帮助团队明确开发顺序。\n\n3. **用户场景**\n   - 用户画像\n   描述目标用户的典型特征（如年龄、职业、习惯），帮助理解用户需求。\n   - 用户旅程地图\n   展示用户与产品的完整交互过程，从接触产品到完成目标的每一步。\n   - 关键场景用例\n   详细描述用户在特定场景下的使用流程，包括触发条件、操作步骤和预期结果。\n\n4. **业务流程**\n   - 业务流程图（Mermaid）\n   使用Mermaid图表展示业务流程，突出用户与系统之间的交互逻辑。\n   - 详细业务流程描述\n   文字描述业务流程的关键步骤，确保逻辑清晰且与功能需求一致。\n\n5. **接口与集成（可选）**\n   - 集成需求\n   如果产品需要与外部系统集成，简要说明集成目标和范围。\n   - 数据流转\n   描述业务层面的数据流转过程（如数据从哪里来，到哪里去），避免涉及技术实现细节。\n\n请确保内容详细、结构清晰，并使用Mermaid图表增强可读性。文档应以需求为导向，聚焦于用户体验和产品功能，避免过多技术细节。"
      }
    },
    "技术债务评估报告": {
      "name": "技术债务评估报告",
      "singlePageAnalysis": {
        "prompt": "请分析此代码文件的技术债务：\n1. 代码质量（重复代码、复杂度）\n2. 性能问题（潜在瓶颈）\n3. 文档情况（是否完整）\n4. 最佳实践（是否遵循）\n请简述，总字数不超过50字。"
      },
      "summaryAnalysis": {
        "prompt": "基于代码分析结果，生成技术债务评估报告：\n\n1. **技术债务概览**\n   - 债务分类统计（饼图）\n   - 严重程度分布（柱状图）\n   - 影响范围评估\n   - 技术债务热力图\n\n2. **详细分析**\n   - 代码质量指标（复杂度、重复率等）\n   - 性能瓶颈分析\n   - 架构隐患评估\n   - 安全风险排查\n\n3. **优先级评估**\n   - 评估矩阵（紧急 vs 重要）\n   - ROI分析\n   - 修复成本估算\n   - 风险影响评级\n\n4. **改进方案**\n   - 短期优化建议\n   - 长期重构计划\n   - 实施步骤\n   - 收益预期\n\n5. **监控指标**\n   - 关键指标定义\n   - 监控方案\n   - 告警阈值\n   - 评估周期\n\n请使用Mermaid图表增强可读性和数据支持分析，确保报告实用且可操作。"
      }
    },
    "安全评估报告": {
      "name": "安全评估报告",
      "singlePageAnalysis": {
        "prompt": "请分析此代码文件的安全隐患：\n1. 常见漏洞（SQL注入、XSS等）\n2. 数据安全（敏感数据处理）\n3. 权限控制（访问控制问题）\n如无明显问题，回答'未发现明显安全隐患'。总字数不超过50字。"
      },
      "summaryAnalysis": {
        "prompt": "基于安全分析结果，生成安全评估报告：\n\n1. **安全风险概览**\n   - 风险等级分布（高、中、低）\n   - 漏洞类型统计（柱状图）\n   - OWASP Top 10对照\n   - 整体安全评分\n\n2. **漏洞详情**\n   - 漏洞描述\n   - 影响范围\n   - 利用难度\n   - 危害程度\n\n3. **风险评估**\n   - CVSS评分\n   - 攻击向量分析\n   - 威胁模型\n   - 风险暴露面\n\n4. **修复方案**\n   - 应急修复建议\n   - 长期防护策略\n   - 最佳实践指南\n   - 安全加固方案\n\n5. **安全治理**\n   - 安全开发流程\n   - 代码审查要点\n   - 持续监控方案\n   - 应急响应预案\n\n请确保报告内容详实，提供具体的安全建议和措施。"
      }
    },
    "API文档": {
      "name": "API文档",
      "singlePageAnalysis": {
        "prompt": "请分析此代码文件，提取API接口信息：\n1. 接口路径和方法（GET/POST等）\n2. 功能简述\n3. 请求参数（名称、类型、是否必需）\n4. 响应格式（字段名称、类型）\n5. 错误码及含义\n如无API，直接回答'未发现API接口'。"
      },
      "summaryAnalysis": {
        "prompt": "基于提取的API接口信息，生成API文档：\n\n1. **API接口列表**\n   - 路径\n   - 方法（GET/POST等）\n   - 功能描述\n   - 请求参数（表格：名称、类型、是否必需、默认值）\n   - 响应数据格式（表格：字段名称、类型、说明）\n\n2. **请求示例**\n   - 为每个API提供curl命令或HTTP请求示例\n\n3. **响应示例**\n   - 为每个API提供JSON响应示例\n\n4. **错误处理**\n   - 错误码列表（表格：错误码、含义、应对方式）\n\n请确保文档结构清晰，易于开发人员理解和使用。"
      }
    },
    "用户行为分析报告": {
      "name": "用户行为分析报告",
      "singlePageAnalysis": {
        "prompt": "请分析此代码文件，关注用户行为：\n1. 功能简述\n2. 用户操作路径（简述）\n3. 潜在痛点（1-2个）\n4. 优化建议（简要）\n请保持简洁，总字数不超过100字。"
      },
      "summaryAnalysis": {
        "prompt": "基于代码的行为描述，生成用户行为分析报告：\n\n1. **用户行为流程**\n   - 用户行为路径（流程图）\n   使用Mermaid流程图展示用户在系统中的典型行为路径，突出关键操作和决策点，帮助读者直观理解用户如何与系统交互。\n   - 关键功能使用路径\n   详细描述用户在使用核心功能时的具体步骤和交互流程，确保内容简洁明了，易于理解，反映用户的实际操作习惯。\n\n2. **用户痛点分析**\n   - 功能复杂性分析\n   识别用户在使用功能时遇到的复杂或困惑点，例如操作步骤繁琐、功能入口难以找到等，并分析其对用户的影响。\n   - 交互不友好之处\n   指出用户界面或交互设计中的问题，如导航不直观、按钮位置不合理或反馈不及时等，具体说明问题表现。\n\n3. **优化建议**\n   - 功能优化建议\n   针对识别的痛点，提出具体的功能改进措施，例如简化操作步骤、优化功能布局或增加提示信息。\n   - 流程改进建议\n   建议优化用户行为流程，例如减少冗余步骤或调整操作顺序，以提升整体流畅度和效率。\n   - 用户体验提升措施\n   提供改善用户体验的具体方法，如优化界面设计、增强操作反馈或提供个性化引导，确保建议实用且可执行。"
      }
    },
    "项目结构分析报告": {
      "name": "项目结构分析报告",
      "singlePageAnalysis": {
        "prompt": "请分析此代码文件在项目中的角色：\n1. 简述该文件的主要功能和职责。\n2. 列出该文件依赖的其他文件或模块。\n请保持简洁，总字数不超过100字。"
      },
      "summaryAnalysis": {
        "prompt": "基于各文件分析，生成项目结构分析报告：\n\n1. **项目架构概览**\n   - 描述项目的主要模块和组件。\n   - 提供项目的目录结构树形图。\n   - 说明项目采用的架构设计模式（如MVC、MVVM等）。\n   - 使用Mermaid图表展示项目的分层关系。\n\n2. **模块依赖分析**\n   - 使用Mermaid图表展示模块间的依赖关系。\n   - 简述每个关键模块的职责。\n\n3. **代码组织评估**\n   - 统计文件的分布情况（如按功能、按模块等）。\n   - 分析命名规范的遵循情况。\n   - 评估代码的分层是否合理。\n\n4. **项目结构优化建议**\n   - 提出目录结构的优化建议。\n   - 建议模块的拆分或合并。\n   - 提供依赖关系的优化方案。\n   - 指出组件复用的机会。\n\n请确保分析清晰易懂，并使用Mermaid图表来可视化项目结构和依赖关系。"
      }
    },
    "毕业设计论文生成": {
      "name": "毕业设计论文生成",
      "singlePageAnalysis": {
        "prompt": "请分析此代码文件，提供以下要点：\n1. 核心功能和目的（一句话描述）\n2. 主要功能模块\n3. 输入输出及交互方式（简述）\n4. 关键技术依赖\n请保持简洁，总字数不超过100字。"
      },
      "summaryAnalysis": {
        "prompt": "根据项目代码分析，按照以下结构生成学术论文初稿，所有图表采用Mermaid语法（确保语法正确可执行）：\n\n---\n# [项目名称]：[核心技术]实现的[应用领域]系统\n\n## **摘要**\n**中文摘要**：  \n（200字左右，四段式结构：①研究背景与问题定义 ②采用的方法与技术路线 ③创新点与实现成果 ④应用价值与理论意义）  \n**关键词**：[技术关键词1]；[技术关键词2]；[应用领域关键词]；[创新点关键词]；[理论基础关键词]\n\n**Abstract**:  \n（精准翻译中文摘要，采用学术英语表达，保持一般现在时态）  \n**Keywords**: [英文关键词对应翻译，用分号分隔]\n\n---\n\n## **第一章 绪论**\n### **1.1 研究背景与意义**\n#### **1.1.1 行业现状与技术痛点**\n（分析目标行业的技术瓶颈、现有解决方案的局限性，150-200字）\n\n#### **1.1.2 研究意义**\n（从理论价值和实践应用两个维度阐述本研究的意义，150-200字）\n\n### **1.2 国内外研究现状**\n#### **1.2.1 国外研究进展**\n（按时间线梳理3-5项代表性国外研究成果，200字左右）\n\n#### **1.2.2 国内研究进展**\n（按研究方向梳理国内相关研究，指出现有研究的不足，200字左右）\n\n#### **1.2.3 研究空白与创新点**\n（基于文献综述，明确指出本研究的切入点和创新空间，150字左右）\n\n---\n\n## **第二章 相关技术分析**\n### **2.1 核心技术原理**\n（详细解析项目采用的主要技术框架/算法/方法，结合代码特性进行说明，500字左右）\n\n```mermaid\ngraph TD\n    A[核心技术] --> B[关键组件1]\n    A --> C[关键组件2]\n    A --> D[关键组件3]\n    B --> B1[特性1]\n    B --> B2[特性2]\n    C --> C1[特性1]\n    C --> C2[特性2]\n    D --> D1[特性1]\n    D --> D2[特性2]\n```\n\n---\n\n## **第三章 系统设计**\n### **3.1 需求分析**\n#### **3.1.1 功能需求**\n（采用用例分析法，明确系统的主要功能模块和用户交互场景，300字左右）\n\n```mermaid\ngraph TD\n    A[系统功能] --> B[核心功能模块1]\n    A --> C[核心功能模块2]\n    A --> D[核心功能模块3]\n    B --> B1[子功能1]\n    B --> B2[子功能2]\n    C --> C1[子功能1]\n    C --> C2[子功能2]\n```\n\n#### **3.1.2 非功能需求**\n（从性能、安全性、可扩展性等维度分析系统的非功能需求，250字左右）\n\n### **3.2 系统架构设计**\n#### **3.2.1 总体架构**\n（结合项目代码结构，详细说明系统的分层架构和各层之间的交互机制，300字左右）\n\n```mermaid\nflowchart TB\n    subgraph 系统架构\n    A[前端/表示层] --> |API接口| B[业务逻辑层]\n    B --> |数据访问| C[数据持久层]\n    end\n    \n    subgraph 技术栈映射\n    A1[前端技术栈] --- A\n    B1[后端技术栈] --- B\n    C1[数据库技术] --- C\n    end\n```\n\n#### **3.2.2 数据结构设计**\n（基于代码中的数据结构，展示核心数据实体及其关系，300字左右）\n\n```mermaid\nerDiagram\n    实体1 ||--o{ 实体2 : 关系描述\n    实体1 ||--|| 实体3 : 关系描述\n    实体3 }o--|| 实体4 : 关系描述\n```\n\n#### **3.2.3 接口设计**\n（详细说明系统内外部的关键接口定义，包括参数规范和返回值，300字左右）\n\n---\n\n## **第四章 系统实现**\n### **4.1 开发环境与技术栈**\n（详细说明项目的开发环境配置、核心依赖库及版本信息，200字左右）\n\n### **4.2 核心功能模块实现**\n#### **4.2.1 模块A实现**\n（基于项目代码，详细分析该模块的实现逻辑和关键算法，结合代码片段说明，200字左右）\n\n#### **4.2.2 模块B实现**\n（基于项目代码，详细分析该模块的实现逻辑和关键算法，结合代码片段说明，200字左右）\n\n\n### **4.3 系统界面与交互设计**\n（展示系统的核心界面及其交互流程，关注用户体验设计，300字左右）\n\n---\n\n## **第五章 系统测试与评估**\n### **5.1 测试方案设计**\n#### **5.1.1 测试环境**\n（仅保留标题结构，不需要写）\n\n#### **5.1.2 测试指标与方法**\n（仅保留标题结构，不需要写）\n\n\n### **5.2 测试结果与分析**\n#### **5.2.1 功能测试结果**\n（仅保留标题结构，不需要写）\n\n#### **5.2.2 性能测试结果**\n（仅保留标题结构，不需要写）\n\n\n#### **5.2.3 测试结论与优化建议**\n（仅保留标题结构，不需要写）\n\n---\n\n## **第六章 结论与展望**\n### **6.1 研究成果总结**\n（从技术创新性、实用价值和理论意义三个方面总结研究成果，200字左右）\n\n### **6.2 局限性分析**\n（客观分析当前研究的不足与局限，包括技术、应用和理论层面，200字左右）\n\n### **6.3 未来研究方向**\n（提出3-5个明确可行的改进方向，并说明实现路径，200字左右）\n\n---"
      }
    }
  },
  "en": {
    "Product Requirements Document (PRD)": {
      "name": "Product Requirements Document (PRD)",
      "singlePageAnalysis": {
        "prompt": "Please analyze this code file and provide: \n1. Core function and purpose (one sentence) \n2. Main functional modules \n3. Input/output and interaction (brief) \n4. Key technical dependencies \nKeep it concise, under 100 words."
      },
      "summaryAnalysis": {
        "prompt": "Based on the functional summaries of each file, create a Product Requirements Document (PRD):\n\n1. **Product Overview**\n   - Background and Value\n   Describe the business background and market value of the product, such as problems solved, market needs met, or business opportunities created. Avoid technical background.\n   - Target Users\n   Clearly define the target user groups, including their characteristics, needs, and behaviors.\n   - Core Value\n   Highlight the product's core competitiveness and value proposition to users, such as improving efficiency, enhancing experience, etc.\n   - Market Positioning\n   Explain the product's market positioning, ensuring direct relevance to functional requirements while avoiding technical details.\n\n2. **Functional Specifications**\n   - Core Functional Modules\n   List the product's core functional modules with clear functional boundaries.\n   - Functional Architecture Diagram (Mermaid)\n   Use Mermaid diagrams to show relationships between functional modules, visually presenting the product's functional structure.\n   - Detailed Function Descriptions\n   Provide detailed descriptions of each functional module, including purpose, inputs, outputs, and expected behavior, ensuring content is specific and understandable.\n   - Function Priority Matrix\n   Define priorities for each function (must-have, important, secondary) to help teams determine development order.\n\n3. **User Scenarios**\n   - User Personas\n   Describe typical characteristics of target users (age, occupation, habits) to help understand user needs.\n   - User Journey Map\n   Show the complete user interaction process, from first contact with the product to goal completion.\n   - Key Scenario Use Cases\n   Detail user workflows in specific scenarios, including triggers, operation steps, and expected outcomes.\n\n4. **Business Process**\n   - Business Process Diagram (Mermaid)\n   Use Mermaid diagrams to show business processes, highlighting user-system interaction logic.\n   - Detailed Process Description\n   Describe key steps in business processes, ensuring clear logic and alignment with functional requirements.\n\n5. **Integration and Interfaces (Optional)**\n   - Integration Requirements\n   If product requires external system integration, briefly explain integration goals and scope.\n   - Data Flow\n   Describe business-level data flow processes (where data comes from and goes to), avoiding technical implementation details.\n\nEnsure detailed content, clear structure, and use Mermaid diagrams for readability. Document should be requirements-driven, focusing on user experience and product functionality while avoiding excessive technical details."
      }
    },
    "Technical Debt Assessment Report": {
      "name": "Technical Debt Assessment Report",
      "singlePageAnalysis": {
        "prompt": "Analyze the technical debt of this code file: \n1. Code quality (duplication, complexity) \n2. Performance issues (potential bottlenecks) \n3. Documentation status (completeness) \n4. Best practices (adherence) \nKeep it brief, under 50 words."
      },
      "summaryAnalysis": {
        "prompt": "Based on code analysis, generate a Technical Debt Assessment Report: \n\n1. **Technical Debt Overview** \n   - Debt category stats (pie chart) \n   - Severity distribution (bar chart) \n   - Impact scope assessment \n   - Technical debt heatmap \n\n2. **Detailed Analysis** \n   - Code quality metrics (complexity, duplication rate) \n   - Performance bottleneck analysis \n   - Architecture risk assessment \n   - Security risk review \n\n3. **Priority Assessment** \n   - Assessment matrix (urgent vs. important) \n   - ROI analysis \n   - Repair cost estimation \n   - Risk impact rating \n\n4. **Improvement Plan** \n   - Short-term optimization suggestions \n   - Long-term refactoring plan \n   - Implementation steps \n   - Expected benefits \n\n5. **Monitoring Metrics** \n   - Key metric definitions \n   - Monitoring plan \n   - Alert thresholds \n   - Evaluation cycle \n\nUse Mermaid diagrams to enhance readability and data-driven analysis, ensuring a practical and actionable report."
      }
    },
    "Security Assessment Report": {
      "name": "Security Assessment Report",
      "singlePageAnalysis": {
        "prompt": "Analyze security risks in this code file: \n1. Common vulnerabilities (SQL injection, XSS, etc.) \n2. Data security (sensitive data handling) \n3. Access control (permission issues) \nIf no obvious issues, state 'No significant security risks found.' Under 50 words."
      },
      "summaryAnalysis": {
        "prompt": "Based on security analysis, generate a Security Assessment Report: \n\n1. **Security Risk Overview** \n   - Risk level distribution (high, medium, low) \n   - Vulnerability type stats (bar chart) \n   - OWASP Top 10 comparison \n   - Overall security score \n\n2. **Vulnerability Details** \n   - Vulnerability descriptions \n   - Impact scope \n   - Exploit difficulty \n   - Severity level \n\n3. **Risk Assessment** \n   - CVSS scoring \n   - Attack vector analysis \n   - Threat model \n   - Risk exposure \n\n4. **Mitigation Plan** \n   - Emergency fix suggestions \n   - Long-term protection strategies \n   - Best practice guidelines \n   - Security hardening plan \n\n5. **Security Governance** \n   - Secure development process \n   - Code review checklist \n   - Continuous monitoring plan \n   - Incident response plan \n\nEnsure detailed content with specific security recommendations and measures."
      }
    },
    "API Documentation": {
      "name": "API Documentation",
      "singlePageAnalysis": {
        "prompt": "Analyze this code file to extract API details: \n1. Endpoint path and method (GET/POST, etc.) \n2. Function overview \n3. Request parameters (name, type, required) \n4. Response format (field name, type) \n5. Error codes and meanings \nIf no API, state 'No API endpoints found.'"
      },
      "summaryAnalysis": {
        "prompt": "Based on extracted API details, generate API Documentation: \n\n1. **API Endpoint List** \n   - Path \n   - Method (GET/POST, etc.) \n   - Function description \n   - Request parameters (table: name, type, required, default) \n   - Response data format (table: field name, type, description) \n\n2. **Request Examples** \n   - Provide curl commands or HTTP request samples for each API \n\n3. **Response Examples** \n   - Provide JSON response samples for each API \n\n4. **Error Handling** \n   - Error code list (table: code, meaning, resolution) \n\nEnsure a clear, developer-friendly structure."
      }
    },
    "User Behavior Analysis Report": {
      "name": "User Behavior Analysis Report",
      "singlePageAnalysis": {
        "prompt": "Analyze this code file for user behavior: \n1. Function overview \n2. User operation path (brief) \n3. Potential pain points (1-2) \n4. Optimization suggestions (brief) \nKeep it concise, under 100 words."
      },
      "summaryAnalysis": {
        "prompt": "Based on code behavior descriptions, generate a User Behavior Analysis Report:\n\n1. **User Behavior Flow**\n   - User Behavior Paths (Flowchart)\n   Use Mermaid flowcharts to show typical user behavior paths in the system, highlighting key operations and decision points to help readers intuitively understand how users interact with the system.\n   - Key Function Usage Paths\n   Provide detailed descriptions of specific steps and interaction processes when users use core functions, ensuring content is concise and easy to understand, reflecting actual user operation habits.\n\n2. **User Pain Point Analysis**\n   - Function Complexity Analysis\n   Identify complex or confusing points users encounter when using functions, such as complicated operation steps or hard-to-find function entries, and analyze their impact on users.\n   - Interaction Unfriendly Points\n   Point out issues in user interface or interaction design, such as unintuitive navigation, unreasonable button placement, or delayed feedback, with specific problem descriptions.\n\n3. **Optimization Suggestions**\n   - Function Optimization Suggestions\n   Propose specific functional improvements for identified pain points, such as simplifying operation steps, optimizing function layout, or adding prompt information.\n   - Process Improvement Suggestions\n   Suggest optimizations for user behavior flow, such as reducing redundant steps or adjusting operation sequence, to enhance overall smoothness and efficiency.\n   - User Experience Enhancement Measures\n   Provide specific methods to improve user experience, such as optimizing interface design, enhancing operation feedback, or providing personalized guidance, ensuring suggestions are practical and executable."
      }
    },
    "Project Structure Analysis Report": {
      "name": "Project Structure Analysis Report",
      "singlePageAnalysis": {
        "prompt": "Please analyze the role of this code file in the project:\n1. Briefly describe the main functions and responsibilities of this file.\n2. List other files or modules that this file depends on.\nPlease keep it concise, with no more than 100 words in total."
      },
      "summaryAnalysis": {
        "prompt": "Based on the analysis of each file, generate a project structure analysis report:\n\n1. **Project Architecture Overview**\n   - Describe the main modules and components of the project.\n   - Provide a directory structure tree diagram.\n   - Explain the architectural design patterns used (e.g., MVC, MVVM).\n   - Use Mermaid diagrams to show project layering.\n\n2. **Module Dependency Analysis**\n   - Use Mermaid diagrams to show dependencies between modules.\n   - Briefly describe the responsibilities of each key module.\n\n3. **Code Organization Assessment**\n   - Analyze file distribution (by function, by module, etc.).\n   - Review naming convention compliance.\n   - Evaluate the rationality of code layering.\n\n4. **Project Structure Optimization Suggestions**\n   - Propose directory structure optimizations.\n   - Suggest module splitting or merging.\n   - Provide dependency optimization solutions.\n   - Identify component reuse opportunities.\n\nPlease ensure the analysis is clear and use Mermaid diagrams to visualize project structure and dependencies."
      }
    }
  },
  "ja": {
    "製品要件ドキュメント（PRD）": {
      "name": "製品要件ドキュメント（PRD）",
      "singlePageAnalysis": {
        "prompt": "このコードファイルを分析し、以下を提供してください：\n1. コア機能と目的（1文で）\n2. 主な機能モジュール\n3. 入出力とインタラクション（簡述）\n4. 主要技術依存関係\n簡潔に、100語以内で。"
      },
      "summaryAnalysis": {
        "prompt": "各ファイルの機能概要に基づき、製品要件ドキュメント（PRD）を作成してください：\n\n1. **製品概要**\n   - 背景と価値\n   製品が生まれたビジネス背景と市場価値を説明し、解決する問題、満たす市場ニーズ、もたらすビジネス機会などを記述。技術的背景は避ける。\n   - ターゲットユーザー\n   製品のターゲットユーザーグループを明確にし、その特徴、ニーズ、行動を含める。\n   - コア価値\n   製品の核となる競争力とユーザーへの価値提案を強調（効率向上、体験改善など）。\n   - 市場ポジショニング\n   製品の市場での位置づけを説明し、機能要件との直接的な関連性を確保。技術的な詳細は避ける。\n\n2. **機能仕様**\n   - コア機能モジュール\n   製品のコア機能モジュールを列挙し、機能の境界を明確に区分。\n   - 機能アーキテクチャ図（Mermaid）\n   Mermaid図を使用して機能モジュール間の関係を示し、製品の機能構造を視覚的に表現。\n   - 詳細機能説明\n   各機能モジュールの目的、入力、出力、期待される動作を含む詳細な説明。内容は具体的で理解しやすいものに。\n   - 機能優先度マトリクス\n   各機能の優先度（必須、重要、二次的）を定義し、開発順序の決定を支援。\n\n3. **ユーザーシナリオ**\n   - ユーザーペルソナ\n   ターゲットユーザーの典型的な特徴（年齢、職業、習慣など）を記述し、ユーザーニーズの理解を促進。\n   - ユーザージャーニーマップ\n   製品との最初の接触から目標達成までの完全な相互作用プロセスを表示。\n   - 主要シナリオユースケース\n   特定のシナリオにおけるユーザーの利用フロー（トリガー、操作手順、期待される結果）を詳細に記述。\n\n4. **業務プロセス**\n   - 業務プロセス図（Mermaid）\n   Mermaid図を使用して業務プロセスを表示し、ユーザーとシステム間の相互作用ロジックを強調。\n   - 詳細プロセス説明\n   業務プロセスの重要なステップを文章で説明し、ロジックの明確さと機能要件との一貫性を確保。\n\n5. **インターフェースと統合（オプション）**\n   - 統合要件\n   外部システムとの統合が必要な場合、統合の目的と範囲を簡潔に説明。\n   - データフロー\n   ビジネスレベルでのデータフロープロセス（データの出所と行先）を説明し、技術的な実装詳細は避ける。\n\n内容は詳細かつ構造化し、Mermaid図で可読性を高めてください。文書は要件主導で、ユーザー体験と製品機能に焦点を当て、過度な技術的詳細は避けてください。"
      }
    },
    "技術的負債評価レポート": {
      "name": "技術的負債評価レポート",
      "singlePageAnalysis": {
        "prompt": "このコードファイルの技術的負債を分析してください：\n1. コード品質（重複、複雑さ）\n2. パフォーマンス問題（潜在的ボトルネック）\n3. ドキュメント状況（完全性）\n4. ベストプラクティス（遵守状況）\n簡潔に、50語以内で。"
      },
      "summaryAnalysis": {
        "prompt": "コード分析結果に基づき、技術的負債評価レポートを作成してください：\n\n1. **技術的負債概要**\n   - 負債分類統計（円グラフ）\n   - 深刻度分布（棒グラフ）\n   - 影響範囲評価\n   - 技術的負債ヒートマップ\n\n2. **詳細分析**\n   - コード品質指標（複雑さ、重複率等）\n   - パフォーマンスボトルネック分析\n   - アーキテクチャリスク評価\n   - セキュリティリスク調査\n\n3. **優先度評価**\n   - 評価マトリクス（緊急 vs 重要）\n   - ROI分析\n   - 修正コスト見積もり\n   - リスク影響評価\n\n4. **改善計画**\n   - 短期最適化提案\n   - 長期リファクタリング計画\n   - 実施手順\n   - 期待収益\n\n5. **監視指標**\n   - 主要指標定義\n   - 監視計画\n   - アラート閾値\n   - 評価周期\n\nMermaid図で可読性とデータ裏付けを強化し、実用的で実行可能なレポートにしてください。"
      }
    },
    "セキュリティ評価レポート": {
      "name": "セキュリティ評価レポート",
      "singlePageAnalysis": {
        "prompt": "このコードファイルのセキュリティリスクを分析してください：\n1. 一般的な脆弱性（SQLインジェクション、XSS等）\n2. データセキュリティ（機密データ処理）\n3. 権限管理（アクセス制御問題）\n明らかな問題がない場合、「重大なセキュリティリスクは見つかりませんでした」と回答。50語以内で。"
      },
      "summaryAnalysis": {
        "prompt": "セキュリティ分析結果に基づき、セキュリティ評価レポートを作成してください：\n\n1. **セキュリティリスク概要**\n   - リスクレベル分布（高、中、低）\n   - 脆弱性タイプ統計（棒グラフ）\n   - OWASP Top 10との比較\n   - 全体セキュリティスコア\n\n2. **脆弱性詳細**\n   - 脆弱性の説明\n   - 影響範囲\n   - 悪用難易度\n   - 危険度\n\n3. **リスク評価**\n   - CVSSスコアリング\n   - 攻撃ベクター分析\n   - 脅威モデル\n   - リスク露出面\n\n4. **修正計画**\n   - 緊急修正提案\n   - 長期防御戦略\n   - ベストプラクティスガイド\n   - セキュリティ強化計画\n\n5. **セキュリティガバナンス**\n   - 安全開発プロセス\n   - コードレビュー要点\n   - 継続的監視計画\n   - 緊急対応計画\n\n詳細な内容と具体的なセキュリティ提案・対策を提供してください。"
      }
    },
    "APIドキュメント": {
      "name": "APIドキュメント",
      "singlePageAnalysis": {
        "prompt": "このコードファイルを分析し、API情報を抽出してください：\n1. エンドポイントパスとメソッド（GET/POST等）\n2. 機能概要\n3. リクエストパラメータ（名前、タイプ、必須かどうか）\n4. レスポンス形式（フィールド名、タイプ）\n5. エラーコードと意味\nAPIがない場合、「APIエンドポイントは見つかりませんでした」と回答。"
      },
      "summaryAnalysis": {
        "prompt": "抽出されたAPI情報に基づき、APIドキュメントを作成してください：\n\n1. **APIエンドポイントリスト**\n   - パス\n   - メソッド（GET/POST等）\n   - 機能説明\n   - リクエストパラメータ（表：名前、タイプ、必須、デフォルト値）\n   - レスポンスデータ形式（表：フィールド名、タイプ、説明）\n\n2. **リクエスト例**\n   - 各APIにcurlコマンドまたはHTTPリクエスト例を提供\n\n3. **レスポンス例**\n   - 各APIにJSONレスポンス例を提供\n\n4. **エラー処理**\n   - エラーコードリスト（表：コード、意味、対処法）\n\n開発者が理解・利用しやすい明確な構造にしてください。"
      }
    },
    "ユーザー行動分析レポート": {
      "name": "ユーザー行動分析レポート",
      "singlePageAnalysis": {
        "prompt": "このコードファイルを分析し、ユーザー行動に注目してください：\n1. 機能概要\n2. ユーザー操作パス（簡述）\n3. 潜在的課題（1-2点）\n4. 最適化提案（簡要）\n簡潔に、100語以内で。"
      },
      "summaryAnalysis": {
        "prompt": "コードの行動記述に基づき、ユーザー行動分析レポートを作成してください：\n\n1. **ユーザー行動フロー**\n   - ユーザー行動パス（フローチャート）\n   Mermaidフローチャートを使用してシステム内の典型的なユーザー行動パスを表示し、重要な操作と判断ポイントを強調して、ユーザーがシステムとどのように相互作用するかを直感的に理解できるようにします。\n   - 主要機能使用パス\n   ユーザーがコア機能を使用する際の具体的なステップと相互作用プロセスを詳細に説明し、内容を簡潔で分かりやすく、実際のユーザーの操作習慣を反映させます。\n\n2. **ユーザー課題分析**\n   - 機能の複雑さ分析\n   ユーザーが機能を使用する際に遭遇する複雑さや混乱ポイントを特定します（例：操作手順が煩雑、機能の入り口が見つけにくいなど）、それらがユーザーに与える影響を分析します。\n   - インタラクションの不親切な点\n   ユーザーインターフェースや相互作用設計の問題点を指摘します（ナビゲーションが直感的でない、ボタンの配置が不適切、フィードバックが遅いなど）、具体的な問題の現れ方を説明します。\n\n3. **最適化提案**\n   - 機能最適化提案\n   特定された課題に対して具体的な機能改善措置を提案します（操作手順の簡素化、機能レイアウトの最適化、ガイド情報の追加など）。\n   - プロセス改善提案\n   ユーザー行動フローの最適化を提案します（冗長なステップの削減や操作順序の調整など）、全体的な流れと効率性を向上させます。\n   - ユーザー体験向上策\n   ユーザー体験を改善するための具体的な方法を提供します（インターフェースデザインの最適化、操作フィードバックの強化、パーソナライズされたガイダンスの提供など）、提案が実用的で実行可能であることを確保します。"
      }
    },
    "プロジェクト構造分析レポート": {
      "name": "プロジェクト構造分析レポート",
      "singlePageAnalysis": {
        "prompt": "このコードファイルのプロジェクトにおける役割を分析してください：\n1. このファイルの主な機能と責任を簡潔に説明してください。\n2. このファイルが依存する他のファイルやモジュールを列挙してください。\n簡潔に保ち、合計100語以内でお願いします。"
      },
      "summaryAnalysis": {
        "prompt": "各ファイルの分析に基づき、プロジェクト構造分析レポートを生成してください：\n\n1. **プロジェクトアーキテクチャ概要**\n   - プロジェクトの主要モジュールとコンポーネントを説明。\n   - ディレクトリ構造のツリー図を提供。\n   - 採用されているアーキテクチャパターン（MVC、MVVMなど）を説明。\n   - Mermaidダイアグラムを使用してプロジェクトの階層関係を表示。\n\n2. **モジュール依存関係分析**\n   - Mermaidダイアグラムを使用してモジュール間の依存関係を表示。\n   - 各主要モジュールの責任を簡潔に説明。\n\n3. **コード構成評価**\n   - ファイルの分布状況（機能別、モジュール別など）を分析。\n   - 命名規則の遵守状況を確認。\n   - コードの階層化の妥当性を評価。\n\n4. **プロジェクト構造の最適化提案**\n   - ディレクトリ構造の最適化を提案。\n   - モジュールの分割または統合を提案。\n   - 依存関係の最適化案を提供。\n   - コンポーネント再利用の機会を指摘。\n\n分析は明確で理解しやすいものとし、Mermaidダイアグラムを使用してプロジェクト構造と依存関係を視覚化してください。"
      }
    }
  }
}
